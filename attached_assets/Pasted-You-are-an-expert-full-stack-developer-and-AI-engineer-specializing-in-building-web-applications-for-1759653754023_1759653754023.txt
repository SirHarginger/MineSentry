You are an expert full-stack developer and AI engineer specializing in building web applications for environmental monitoring. Your task is to generate a complete, deployable web app called **MineSentry**, designed to monitor illegal small-scale mining sites (galamsey) in specific hotspot zones across Ghana, including Tarkwa (centered at approx. 5.2922° N, -1.9833° W), Obuasi (6.2019° N, -1.6586° W), and Damang (6.0123° N, -1.8625° W). The app leverages advanced machine learning for change detection, fusing multimodal satellite data from NASA (Landsat Collection 2 for optical imagery at 30m resolution, VIIRS Black Marble for night-light detection, MODIS/VIIRS for thermal anomalies) and ESA (Sentinel-1 for SAR, Sentinel-2 for multispectral) processed via Google Earth Engine (GEE). It incorporates community-driven features for reporting and alerts, aligning with the slogan **"Guarding Earth’s Ecosystems"**.

### Key Requirements:
- **Tech Stack**:
  - **Frontend**: React.js (v18+) with Leaflet (v1.9) for maps, Tailwind CSS (v3+) for styling, Chart.js (v4+) for visualizations, Firebase (v9+) for authentication, real-time database (community reports/alerts), and storage (photo uploads). Use Workbox for Progressive Web App (PWA) offline support.
  - **Backend**: Python 3.9+ with Flask (v2.3+) or FastAPI (v0.100+) for API endpoints, PyTorch (v2.0+) for ML inference, and rasterio/xarray for data handling.
  - **ML Integration**: Integrate a pre-trained Siamese U-Net model uploaded as 'galamsey_model.pth'. The model accepts 256x256 pixel tiles with 8 channels (RGB, NIR, NDVI, NDWI, SAR VV/VH, VIIRS night lights, thermal anomalies) as input, outputting binary change masks, confidence scores (0-100), and saliency maps (via Grad-CAM). Provide code to load the model with `torch.load('galamsey_model.pth')` and handle inference with batch size 4 on CPU (fallback to GPU if available via `torch.cuda.is_available()`).
  - **Database**: Firebase Realtime Database or Firestore for storing user reports (geo-point, photo URL, description, category), alert subscriptions, and validation votes. Use Firebase Storage for images.
  - **Deployment**: Frontend on Vercel (free tier), backend on Railway (free tier) or Heroku, with ngrok for local testing (provide .env placeholders: `GEE_API_KEY`, `FIREBASE_CONFIG`, `TWILIO_SID`, `TWILIO_TOKEN`).
  - **Data Sources**: GEE API for fetching pre-processed monthly composites (e.g., Jan 2020-Jun 2025) clipped to a 100x100km ROI covering Tarkwa, Obuasi, and Damang (use polygon: [[-2.2787, 5.9294], [-2.4609, 5.3351], [-2.2487, 5.1146], [-1.5431, 5.0595], [-1.1626, 5.3603], [-0.8767, 5.4774], [-0.6922, 6.1014], [-1.6676, 6.4017], [-2.2787, 5.9294]]). Pre-compute features (NDVI, NDWI, SAR backscatter) in GEE and export as TIFFs or arrays for inference.
  - **Other**: Mobile-responsive (Tailwind breakpoints: sm, md, lg), accessible (WCAG 2.1 AA compliance: high contrast ratios >4.5:1, alt text for all visuals, keyboard navigation via `tabindex`), offline-capable (cache 10MB of map tiles and recent predictions via Workbox PWA).

- **Design Philosophy**:
  - **Aesthetic**: Eco-inspired palette—greens (#228B22 for forests), blues (#1E90FF for water), red/orange (#FF4500) for high-risk alerts. Include dark mode toggle (controlled by `useState` with localStorage persistence). Use subtle animations (CSS `transition: opacity 0.3s`, fade-ins for predictions) and micro-interactions (hover `:hover` glow with `bg-opacity-20`).
  - **Layout**:
    - **Central Map View** (70% screen): Interactive Leaflet map with OpenStreetMap baselayer, Ghana outline, and hotspot markers (green <33, orange 33-66, red >66 risk; clustered with Leaflet.markercluster).
    - **Left Sidebar** (20%): Accordion-style controls (React-Accordion) for analysis, filters, tools.
    - **Right Panel** (10%, expandable with `max-w-md`): Details, predictions, community features.
    - **Top Navbar**: "MineSentry" logo (SVG of satellite eye over mine pit), slogan **"Guarding Earth’s Ecosystems"**, user menu (login/logout, alert subscriptions), search bar (fuzzy search for hotspots), mode switch (Detection/Analysis tabs).
    - **Bottom Footer**: Links to NASA (https://earthdata.nasa.gov), ESA (https://sentinel.esa.int), about, legal.
  - **Branding**: Default to Ghana-wide view with pre-loaded hotspots (Tarkwa, Obuasi, Damang). Display current date/time (e.g., "October 05, 2025, 08:38 AM GMT") in navbar using `new Date().toLocaleString('en-GB', { timeZone: 'GMT' })`.

- **Core Features**:
  1. **Interactive Map Visualization**:
     - Overlays: Toggles for Landsat RGB/NIR, Sentinel-1 SAR, VIIRS night lights/thermal. Time-lapse slider (React-Slider) for 2020-2025 composites with fade transitions.
     - Interactions: Click/drag to select tiles (auto-fill coords like 5.5568, -1.7888), hover tooltips with risk previews (React-Popper). Mini-map inset (Leaflet.minimap). 3D terrain view with CesiumJS (load DEM data from NASA).
     - New: Hotspot heatmap (Leaflet.heat) for galamsey density; AR mode (WebXR) for mobile overlays (detect via `navigator.userAgent`).

  2. **Risk Prediction and Analysis**:
     - Tool: "Monitor Hotspots" in sidebar—draw polygons (Leaflet.draw) or select predefined zones (dropdown: Tarkwa, Obuasi, Damang). Tile size dropdown (128/256/512px).
     - Output: Loading spinner (React-Spinner), map overlay with red change masks (opacity 0.7), right panel with risk score circle (Chart.js radial gauge, e.g., 87.3), confidence breakdown (e.g., "80% optical, 20% SAR"), timestamp.
     - ML Flow: Fetch GEE data (API call with `ee.ImageCollection`), preprocess (stack 8 channels, normalize [0,1]), run inference, generate outputs.
     - Features: Trend charts (line for risk, bar for hectares impacted—exportable PDF/CSV with jsPDF); comparative views (side-by-side with React-Split); batch analysis (queue with progress bar); risk forecasting (extrapolate trends for 6/12 months with uncertainty bands).

  3. **Explainable AI Insights**:
     - "Why Detected?" tab: Saliency heatmaps (Grad-CAM overlay), summaries (e.g., "High risk at Damang due to 40% NDVI drop, 05/10/2025"), feature pie chart (Chart.js).
     - New: Hotspot drill-down—click for annotations (e.g., "Obuasi: 15ha change, water pollution risk").

  4. **Community Reporting and Alerts**:
     - Login required (Firebase auth with Google).
     - Reporting: "+" button or right-click modal (React-Modal)—auto-fill location (navigator.geolocation), photo upload (Firebase Storage), category dropdown (e.g., "Water Pollution"), submit to Firestore (triggers active learning fine-tuning).
     - Alerts: Region subscriptions (map draw), frequency (daily/weekly), delivery (in-app with React-Toastify, email/SMS via Twilio). Alert feed with map links.
     - New: Crowdsourced validation (thumbs up/down with badges); local forums per hotspot (Firestore collection); impact dashboard (e.g., "300 reports from Tarkwa").

- **Additional Features**:
  - **Advanced Visualizations**: Custom overlays (file upload with react-dropzone, parse GeoJSON); story maps (Leaflet.storymap with NASA video embeds).
  - **Deeper Analysis**: Galamsey impact calculator (CO2, water radius—pre-computed formulas); recovery simulator (what-if trends); data export hub (KML/CSV with togeojson).
  - **User Management**: Profiles (Firestore doc per user); team workspaces (shared collections); onboarding tutorial (Intro.js).
  - **Sustainability**: Ghana-wide mode (toggle with ROI adjust); offline support (Workbox precache); admin dashboard (Firestore query for analytics).

- **Implementation Guidelines**:
  - **Feasibility**: MVP for 48-hour hackathon—modular components (e.g., `<MapComponent />`, `<HotspotPanel />`), fallbacks (NDVI drop >0.2 if ML lags).
  - **Security**: Authenticate GEE/API calls with OAuth; sanitize inputs with libraries like bleach.
  - **Testing**: End-to-end flows (detect → report → alert); seed 5-10 fake reports in Firestore.
  - **Output**: Generate code structure—folders (`src/frontend`, `src/backend`, `src/ml`). Include README with setup (`npm install`, `pip install -r requirements.txt`), deployment (Vercel/Railway), and .env placeholders. Provide sample data (e.g., 256x256 tile JSON).
  - **Integration**: Load uploaded 'galamsey_model.pth' with error handling (`try/except` for corrupt files); optimize inference (<1min per tile).
  - **Polish**: Commented code, error messages (e.g., "GEE quota exceeded"), demo data for hotspots.

Generate the complete app code, including all React components, Flask/FastAPI routes, PyTorch inference scripts, and Firebase integrations. Ensure it’s functional, polished, and focused on Ghana’s galamsey hotspots for real-world impact at the NASA Space Apps Challenge. Use placeholders for external keys and the trained machine learning model; galamsey_unet_focal.pth is uploaded in the chat.


